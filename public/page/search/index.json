[{"content":"Git真的是非常重要了！！但我编码不多，用到Git的场景也很少，一段时间不用就会忘掉好多命令和用法QwQ。\n按照一般的工作流记录一遍使用Git的工作流（顺便水一篇blog），顺便当个备忘录或教程（？），不要再忘了！\n配置Git 安装Git后，首先需要设置是谁在这台设备上使用Git工作，给自己注册个身份证：\ngit config --global user.name \u0026#34;Name\u0026#34; git config --global user.email \u0026#34;Email@email.com\u0026#34; # --global 选项为用户级配置，在当前用户目录下(~)生成 .gitconfig # --system --local 分别为机器级配置和仓库级配置 # 分别生成在\tgithome 和 repo 下 为了方便使用Github或其他Git服务器，我们需要配置SSH。为防止冒名顶替可以配置GPG：\nssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; # 若不支持 ed25519 则使用如下命令 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; gpg --full-generate-key # 若版本过旧使用如下命令 gpg --default-new-key-algo rsa4096 --gen-key # 查看现有的GPG密钥 gpg --list-secret-keys --keyid-format=long # 在Git中设置自己的私钥ID git config --global user.signingkey SEC_key_id git config --global commit.gpgsign true # 导出公钥 gpg --armor --export SEC_key_id 我的GPG公钥：\nhttps://keyserver.ubuntu.com/pks/lookup?search=zhixiaovo%40gmail.com\u0026amp;fingerprint=on\u0026amp;op=index # 0xb22de376c5f893473e1ffd32862437be1eedfb44 一些方便的命令 ^w^ ：\n# 更改git打开的文本编辑器 git config -- system core.editor vim # 长命令简写 git config -- global alias.diy_name_here command_here # 一条输出好看commit log的简写命令 git config -- global alias.loog log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit # 手动编辑config文件 git config -- global --edit 本地操作 要管理我们的项目，首先得创建一个Git库：\ngit init my_proj # or mkdir my_proj cd my_proj git init 从头开始开发，先编写一些项目的配置文件，然后提交，作为最初的版本：\n# 添加所有文件到Stage git add . # 将内容从Stage提交 # -m \u0026#34;message\u0026#34; 选项附带简短的提交消息 git commit # 将当前Stage的内容合并到最近一次的提交，同时修改提交的message git commit -m \u0026#34;message\u0026#34; --amend 之后可以新建一个分支，在该分支上继续开发任务：\n# 查看当前仓库分支 git branch # 新建分支 git branch dev # 切换到新分支（两条效果相同） git switch dev git checkout dev # 可以用以下表示新建并切换到新分区 git switch -c dev git checkout -b dev # 修改分支名 git branch -M old_name new_name # 或修改当前分支 git branch -M new_name 现在看看在开发时怎么进行版本管理（）：\n# 查看commit记录 # --pretty=oneline 选项简化输出每行显示一条commit # --oneline 选项简写commit id # -- file_here 选项显该文件相关的commit # --graph 选项图形化显示分支信息 git log # 查看当前仓库的状态 git status # 查看所有操作日志 git reflog # 若有文件被修改，查看工作区和Stage的差异 git diff file_name_here # 查看工作区或Stage与当前HEAD指向版本的差异 git diff HEAD -- file git diff HEAD --cached # revert 用于撤销指定commit的更改，并为此次撤销创建commit应用到当前分支 git revert commit_id_here # reset 用于回退到之前的版本 # HEAD^n 表示上n次提交 # --hard 已提交状态（删除工作区修改） --soft 未提交状态 --mixed 已添加未提交状态（） git reset --hard HEAD^ git reset --hard commit_id_here # 撤销*Stage*中已add的文件，保留工作区中的修改（不改变工作区） git restore --staged file # 与上条效果相同 git reset HEAD file # 撤销*Stage*中已add的文件，并撤销工作区中的修改使其与HEAD（若Stage中存在，则是Stage）一致 git restore file # 与上条命令效果相同 git checkout -- file # 删除文件 rm file git add. # 与上条效果相同 git rm file # 用于选取一次commit合并到当前分支 git cherry-pick commit_id # tag 用于为特定commit添加标签，可用于发布版本 # 当前命令为HEAD指向的commit添加标签 git tag tag_here # 为指定commit添加标签 git tag tag_here commit_id_here # -a 指定标签名 -m 指定标签说明 git tag -a tag_here -m \u0026#34;message\u0026#34; commit_id_here # 撤销打上的标签 git tag -d tag_here # 查看所有标签 git tag # 查看特定标签信息 git show tag_here 在该分支上完成开发任务后，可以合并到master分支：\ngit switch master # 合并分支 # 默认 Fast-forward模式 合并 git merge dev # 合并后可删除分支 git branch -d dev # 如果分支在合并时太乱，可以Rebase成一条线 git rebase # 显示图形化的分支信息 git log --graph 协作开发 在本地使用Git进行版本管理进行得差不多了，现在看看如何使用Git借助远程仓库与别人协助工作。\n首先看看怎么进行远程仓库的一些相关操作：\n# 查看当前仓库的远程仓库信息 git remote -v # 为本地仓库添加远程仓库 git remote add remote_name remote_repo_uri # 推送选定分支到远程仓库 # --tags 选项推送本地所有tag git push remote_name branch_name # 将远程仓库作为选定本地分支的上游，简化push git push -u remote_name branch_name # 从远程仓库拉取 会merge到工作区 git pull remote_name # 从远程仓库拉取 只拉取仓库，不改变工作区，需要手动merge git ferch remote_name # 删除当前仓库和远程仓库的绑定信息 git remote rm remote_name # 从已有的远程仓库开始开发 git clone remote_name 多分支下与远程仓库的操作：\n# 查看远程仓库的分支 # -a 选项查看本地和远程的所有分支 git branch -r # 创建分支 # 将本地分支推送到远程。远程若没有则会创建 # -u 选项将绑定upstream，简化push git push remote_name branch_name # 一次推送本地所有分支 git push --all remote_name # 在本地创建分支，并与已存在的远程仓库关联 git checkout -b branch_name remote_name/remote_branch # 删除远程分支 git push remote_name --delete branch_name # 删除本地分支 git branch -d branch_name Patch和Submodule Patch用于记录代码的更改及应用，可以使用它生成最近几次的commit记录的patch，也可以很方便地把patch的改动合并：\n# 生成patch # 通过最近的n次commit生成n个patch git format-patch -n # 应用patch，但不会生成新的commit git apply patch_name.patch # 应用patch，但会生成新的commit git am patch_name.patch # 可使用send-email发送patch git send-email --to=\u0026#34;email\u0026#34; patch_name.patch Submodule用于管理大型项目，尤其是一个项目是由多个子项目构成时。例如Rust开发中使用 workspace 与 submodule 配合进行项目管理：\n# 添加submodule # 添加本地的git仓库 git submodule add ./submodule_name # 添加远程仓库 git submodule add url submodule_path # 克隆带有 submodule 的仓库 git clone --recurse-submodules repo_url # 或克隆仓库后再获取submodule git submodule update --init --recursive # 为子模块commit后，包含它作为submodule的仓库也需要提交commit # submodule的远程仓库更新后，拉取最新代码 git submodule update --remote # 若只需要更新某个子模块 cd module_name git pull cd .. git add . \u0026amp;\u0026amp; git commit -m \u0026#34;message\u0026#34; # 删除submodule git submodule deinit -f module_name git rm -f module_name rm -rf .git/modules/module_name git commit -m \u0026#34;message\u0026#34; ","date":"2025-02-08T20:25:00+08:00","permalink":"http://localhost:1313/post/%E5%86%8D%E5%AD%A6%E4%B8%80%E9%81%8Dgit/","title":"再学一遍Git"},{"content":"青春对我来说是一种自由的感觉。从以前到现在，社会身份逐渐自由，思想灵魂逃离自由。\n阴着却明亮的天，微凉的轻轻荡漾的风，在几棵柳树或橡树所在的地方，或跑或跳。 以前这样的场景最能使我的情绪激荡，当时仅靠环境就可以对情绪施加各样的压力，产生各种奇妙的感觉。而现在少有这种感觉了，或许是我的情绪本身不再敏感，或许是有更大的压力使我来不及感受，或许二者都有。\n最近某天我在一处公园的草地上散步，一不小心摔在了地上。 我趴在草坪上懵逼，脑子空空的，可能是闻到了草或泥土的味道（也肯定没闻到一些脏脏的味道），我没有着急起来，而是翻了个身继续躺。 我似乎捕捉到了以前有的某些感觉。但它来得很短暂，周围人聊天话语中一些破碎的字词让我想到一些关于生活或生存的事情，让我从地上拾起来。\n我现在理应拥有使用我身体以及让它进行一切行为的自由，但我的思想却不再能支配它们的自由了。\n","date":"2025-02-08T02:18:14+08:00","image":"http://localhost:1313/post/%E8%AE%B8%E5%A4%9A%E6%97%A5%E5%89%8D%E7%9A%84%E8%87%AA%E7%94%B1/flower1_hu_6bccffe159e6af08.jpg","permalink":"http://localhost:1313/post/%E8%AE%B8%E5%A4%9A%E6%97%A5%E5%89%8D%E7%9A%84%E8%87%AA%E7%94%B1/","title":"许多日前的自由"},{"content":"坐在电脑前神游时无意翻到了以前不知何时写的一些文字。\n今日来看往日，全是发疯，不过闲时看着倒是有些意思。随便找些搬运过来，刚好填补下空空如也的Blog。 还有许多自己拍的觉得有些意思的图，拿来当封面，这样看起来不至于很单调 ( .\n晚安 我正处在一处狭小的空间中，并不算好的环境和生活中的一些压力让我有些压抑。 但这时是夜，声音是寂静，颜色是望不到头的黑，我的情绪便能很好地融入在夜里。 也有不似白日里太阳的光，没有活力，冷冷地静止或移动。\n夜使我的忧郁或激昂看起来像是冷静，即使我知道这只是另一种疲倦。 我时而疲倦地叹息，时而疲倦地瘫坐，直到我忘记疲倦。 我不能走完完整的疲倦的夜，我不愿看它变成另一种无味，于是用睡眠来跨过夜的尸体，同时也让我如它一样无味。\n我记住梦前的晚安的话语，当作我梦中的幸运符，我在自己入睡前寄托所愿。 夜如此激发人的本能，希望传承的遗产。尽管这样，它仍使我安慰，它能带来安全的，温柔的睡和梦。\n今天的我还是不够好啊，所以，晚安。 明天的另一个我会怎么样呢，所以，晚安。 今天的自己将随夜留在今天，所以将最后的温柔带给自己，晚安！\n","date":"2025-02-08T01:13:35+08:00","image":"http://localhost:1313/post/%E8%AE%B8%E5%A4%9A%E6%97%A5%E5%89%8D%E7%9A%84%E6%99%9A%E5%AE%89/navigation_hu_6e80257c9fb2094e.jpg","permalink":"http://localhost:1313/post/%E8%AE%B8%E5%A4%9A%E6%97%A5%E5%89%8D%E7%9A%84%E6%99%9A%E5%AE%89/","title":"许多日前的晚安"},{"content":"Hello World Welcome to my Blog !!!\nIt was built with Hugo and the theme \u0026ldquo;Stack\u0026rdquo;.\n","date":"2025-01-30T13:30:00+08:00","image":"http://localhost:1313/post/hello-world/cover_hu_843e06473c5bb246.jpg","permalink":"http://localhost:1313/post/hello-world/","title":"Hello Wrold"}]